"use strict";(self.webpackChunkcc_cwebsite=self.webpackChunkcc_cwebsite||[]).push([[5162],{7811:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var r=t(3790);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),g=s,y=c["".concat(i,".").concat(g)]||c[g]||m[g]||o;return t?r.createElement(y,a(a({ref:n},u),{},{components:t})):r.createElement(y,a({ref:n},u))}));function y(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=g;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[c]="string"==typeof e?e:s,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3981:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(4101),s=(t(3790),t(7811));const o={slug:"python-comprehension-list",title:"Python - Comprehension Lists",authors:"jonas",keywords:["python","dev","compli","comprehension list","listes en intention","sam et max"],tags:["python","dev","compli","comprehension list","listes en intention","sam et max"],image:"/img/blog/python-gen.jpg",description:"Dans le top 10 des raisons d\u2019aimer Python se hisse ais\xe9ment les listes en intension, ou \u201ccomprehension lists\u201d. Rappel du concept, et un petit tour complet de ce qu\u2019on peut en faire.",draft:!1},a=void 0,l={permalink:"/blog/python-comprehension-list",editUrl:"https://github.com/CoopCodeCommun/CCCWebSite/blog/2023-11-19-Python-comprehension-list.md",source:"@site/blog/2023-11-19-Python-comprehension-list.md",title:"Python - Comprehension Lists",description:"Dans le top 10 des raisons d\u2019aimer Python se hisse ais\xe9ment les listes en intension, ou \u201ccomprehension lists\u201d. Rappel du concept, et un petit tour complet de ce qu\u2019on peut en faire.",date:"2023-11-19T00:00:00.000Z",formattedDate:"19 novembre 2023",tags:[{label:"python",permalink:"/blog/tags/python"},{label:"dev",permalink:"/blog/tags/dev"},{label:"compli",permalink:"/blog/tags/compli"},{label:"comprehension list",permalink:"/blog/tags/comprehension-list"},{label:"listes en intention",permalink:"/blog/tags/listes-en-intention"},{label:"sam et max",permalink:"/blog/tags/sam-et-max"}],readingTime:4.265,hasTruncateMarker:!1,authors:[{name:"Jonas Turbeaux",title:"Charmeur de python",url:"https://github.com/Nasjoe",imageURL:"/img/jojoCable300Carre.png",key:"jonas"}],frontMatter:{slug:"python-comprehension-list",title:"Python - Comprehension Lists",authors:"jonas",keywords:["python","dev","compli","comprehension list","listes en intention","sam et max"],tags:["python","dev","compli","comprehension list","listes en intention","sam et max"],image:"/img/blog/python-gen.jpg",description:"Dans le top 10 des raisons d\u2019aimer Python se hisse ais\xe9ment les listes en intension, ou \u201ccomprehension lists\u201d. Rappel du concept, et un petit tour complet de ce qu\u2019on peut en faire.",draft:!1},nextItem:{title:"Python - L\u2019unpacking",permalink:"/blog/python-unpacking"}},i={authorsImageUrls:[void 0]},p=[{value:"La boucle for",id:"la-boucle-for",level:2},{value:"Les listes en intension: la base",id:"les-listes-en-intension-la-base",level:2}],u={toc:p},c="wrapper";function m(e){let{components:n,...o}=e;return(0,s.yg)(c,(0,r.A)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"/img/blog/python-gen.jpg",src:t(1982).A})),(0,s.yg)("h1",{id:"python---comprehension-lists"},"Python - Comprehension Lists"),(0,s.yg)("p",null,"Dans le top 10 des raisons d\u2019aimer Python se hisse ais\xe9ment les listes en intension, ou \u201ccomprehension lists\u201d pour les\ngens branch\xe9s."),(0,s.yg)("p",null,"Rappel du concept, et un petit tour complet de ce qu\u2019on peut en faire. Les connaisseurs attendront le\nsecond article qui aborde des notions avanc\xe9es, et contiendra quelques bonus."),(0,s.yg)("p",null,"On continue de ressusiter les articles de Sam et Max tout en se formant ? C'est parti !"),(0,s.yg)("h2",{id:"la-boucle-for"},"La boucle for"),(0,s.yg)("p",null,"Disclaimer: pour comprendre ce petit gros article, il faut \xeatre \xe0 l\u2019aise avec la boucle for et les listes."),(0,s.yg)("p",null,"En Python, on it\xe8re beaucoup, c\u2019est \xe0 dire qu\u2019on applique tr\xe8s souvent un traitement \xe0 tous les \xe9l\xe9ments d\u2019une s\xe9quence,\nun par un. Et pour \xe7a il y a la boucle for:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},'sequence = ["a", "b", "c"]\nfor element in sequence:\n    print(element)\n# a\n# b\n# c\n')),(0,s.yg)("p",null,"Et tr\xe8s souvent, on fait une nouvelle liste avec les \xe9l\xe9ments de la premi\xe8re liste, mais modifi\xe9s:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"sequence = [\"a\", \"b\", \"c\"]\nnew_sequence = []\nfor element in sequence:\n    new_sequence.append(element.upper())\n\nprint(new_sequence)\n# ['A', 'B', 'C']\n")),(0,s.yg)("h2",{id:"les-listes-en-intension-la-base"},"Les listes en intension: la base"),(0,s.yg)("p",null,"Cette op\xe9ration \u2013 prendre une s\xe9quence, modifier les \xe9l\xe9ments un par un, et faire une autre liste avec \u2013 est tr\xe8s\ncommune. Et comme pour \xe0 peu pr\xe8s tout ce qui est op\xe9ration courante, Python poss\xe8de une mani\xe8re \xe9l\xe9gante de le faire\nplus vite."),(0,s.yg)("p",null,"Reliez bien le bloc pr\xe9c\xe9dent, il devient:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"sequence = [\"a\", \"b\", \"c\"]\nnew_sequence = [element.upper() for element in sequence]\nprint(new_sequence)\n# ['A', 'B', 'C']\n")),(0,s.yg)("p",null,"Il n\u2019y a aucun myst\xe8re, ce code fait exactement la m\xeame chose, mais:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"new_sequence = []\nfor element in sequence:\n    new_sequence.append(element.upper())\n")),(0,s.yg)("p",null,"Est r\xe9duit \xe0:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"new_sequence = [element.upper() for element in sequence]\n")),(0,s.yg)("p",null,"Ne cherchez pas un truc compliqu\xe9, c\u2019est juste une question de syntaxe, \xe7a fait la m\xeame chose, mais \xe9crit diff\xe9remment :\n\xe0 droite, la boucle, \xe0 gauche, ce que l\u2019on veut mettre dans la liste finale."),(0,s.yg)("p",null,"Et c\u2019est surtout beaucoup plus court."),(0,s.yg)("p",null,"L\xe0 o\xf9 \xe7a devient franchement sympa, c\u2019est que l\u2019on peut assigner le r\xe9sultat d\u2019une liste en intension directement \xe0 la\nvariable originale:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"sequence = [\"a\", \"b\", \"c\"]\nnew_sequence = [element.upper() for element in sequence]\nprint(new_sequence)\n# ['A', 'B', 'C']\n")),(0,s.yg)("p",null,"Devient alors:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"sequence = [\"a\", \"b\", \"c\"]\nsequence = [element.upper() for element in sequence]\nprint(sequence)\n# ['A', 'B', 'C']\n")),(0,s.yg)("p",null,"Et vous avez du coup un moyen tr\xe8s propre de transformer toute une liste.\nListes en intension avanc\xe9es"),(0,s.yg)("p",null,"On peut faire bien plus avec les listes en intension. Python est un langage dynamiquement typ\xe9, donc on peut transformer\ncarr\xe9ment le type de liste."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"sequence = [1, 2, 3]\nprint([str(nombre) for nombre in sequence])\n# ['1', '2', '3']\n")),(0,s.yg)("p",null,"On peut aussi faire des op\xe9rations un peu plus complexes:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"sequence = [1, 2, 3]\nprint(['a' * nombre for nombre in sequence])\n# ['a', 'aa', 'aaa']\n")),(0,s.yg)("p",null,"Et m\xeame construire des sequences imbriqu\xe9es \xe0 la vol\xe9e:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"sequence = [1, 2, 3]\nprint(list(range(5)))  # petit rappel de l'usage de la fonction range\n# [0, 1, 2, 3, 4]\n\nsequence = [(nombre, list(range(nombre))) for nombre in sequence]\nprint(sequence)\n# [(1, [0]), (2, [0, 1]), (3, [0, 1, 2])]\n\nprint(sequence[-1])\n# (3, [0, 1, 2])\n\nprint(sequence[-1][0])\n# 3\n\nprint(sequence[-1][1])\n# [0, 1, 2]\n")),(0,s.yg)("p",null,"La syntaxe ",(0,s.yg)("inlineCode",{parentName:"p"},"[expression for element in sequence]")," autorise n\u2019importe quelle expression, du coup on peut cr\xe9er des listes\ntr\xe8s \xe9labor\xe9es, en utilisant tous les op\xe9rateurs math\xe9matiques, logiques, etc, et toutes les fonctions que l\u2019on veut.\nFiltrer avec les listes en intension"),(0,s.yg)("p",null,"Une autre op\xe9ration courante consiste \xe0 filtrer la liste plut\xf4t que de la transformer :"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"nombres = range(10)\nnombres_pairs = []\nfor nombre in nombres:\n    if nombre % 2 == 0:  # garder uniquement les nombres pairs\n        nombres_pairs.append(nombre)\n\nprint(nombres)\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(nombres_pairs)\n# [0, 2, 4, 6, 8]\n")),(0,s.yg)("p",null,"\xc9videment Python a \xe9galement une syntaxe plus courte pour cela. Il suffit de rajouter la condition \xe0 la fin:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"nombres = range(10)\nprint([nombre for nombre in nombres if nombre % 2 == 0])\n# [0, 2, 4, 6, 8]\n")),(0,s.yg)("p",null,"Toutes les expressions habituellement utilisables pour tester une condition sont \xe9galement disponibles."),(0,s.yg)("p",null,"Bien s\xfbr, rien ne vous emp\xeache de filtrer ET de transformer la liste en m\xeame temps. En clair, un nouvel arrivant \xe0\nPython fera \xe7a:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"nombres = range(10)\nsommes = []\nfor nombre in nombres:\n    if nombre % 2 == 0:\n        somme = 0\n        for i in range(nombre):\n            somme += i\n        sommes.append(somme)\n\nprint(sommes)\n# [0, 1, 6, 15, 28]\n")),(0,s.yg)("p",null,"Un codeur qui trouve ses marques fera \xe7a:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"sommes = []\nfor nombre in range(10):\n    if nombre % 2 == 0:\n        sommes.append(sum(range(nombre)))\n\nprint(sommes)\n# [0, 1, 6, 15, 28]\n")),(0,s.yg)("p",null,"Un pythoniste affranchi ira droit au but:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"print([sum(range(nombre)) for nombre in range(10) if nombre % 2 == 0])\n")),(0,s.yg)("p",null,"Bon, en v\xe9rit\xe9 il fera plut\xf4t:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-python"},"[sum(range(nombre)) for nombre in range(0, 10, 2)]\n")),(0,s.yg)("p",null,"Mais c\u2019\xe9tait pour l\u2019exemple :-)"),(0,s.yg)("p",null,"Les listes en intension ont encore plus \xe0 offrir, la suite au prochain article !"))}m.isMDXComponent=!0},1982:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/python-gen-1cba56233b6b048e0eb35fad2b6a6c99.jpg"}}]);