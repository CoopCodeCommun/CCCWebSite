"use strict";(self.webpackChunkcc_cwebsite=self.webpackChunkcc_cwebsite||[]).push([[6153],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,g=c["".concat(u,".").concat(m)]||c[m]||d[m]||l;return t?a.createElement(g,i(i({ref:n},p),{},{components:t})):a.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8954:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={slug:"python-unpacking",title:"Python - L\u2019unpacking",authors:"jonas",keywords:["python","dev","unpacking","sam et max"],tags:["python","dev","unpacking","sam et max"],image:"/img/blog/python-unboxing.jpg",description:"Une fonctionalit\xe9 typiquement pythonienne qui permet d\u2019augmenter drastiquement la lisibilit\xe9 des programmes.",draft:!1},i=void 0,o={permalink:"/blog/python-unpacking",editUrl:"https://github.com/CoopCodeCommun/CCCWebSite/blog/2023-11-11-Python-unpacking.md",source:"@site/blog/2023-11-11-Python-unpacking.md",title:"Python - L\u2019unpacking",description:"Une fonctionalit\xe9 typiquement pythonienne qui permet d\u2019augmenter drastiquement la lisibilit\xe9 des programmes.",date:"2023-11-11T00:00:00.000Z",formattedDate:"11 novembre 2023",tags:[{label:"python",permalink:"/blog/tags/python"},{label:"dev",permalink:"/blog/tags/dev"},{label:"unpacking",permalink:"/blog/tags/unpacking"},{label:"sam et max",permalink:"/blog/tags/sam-et-max"}],readingTime:6.925,hasTruncateMarker:!1,authors:[{name:"Jonas Turbeaux",title:"Charmeur de python",url:"https://github.com/Nasjoe",imageURL:"/img/jojoCable300Carre.png",key:"jonas"}],frontMatter:{slug:"python-unpacking",title:"Python - L\u2019unpacking",authors:"jonas",keywords:["python","dev","unpacking","sam et max"],tags:["python","dev","unpacking","sam et max"],image:"/img/blog/python-unboxing.jpg",description:"Une fonctionalit\xe9 typiquement pythonienne qui permet d\u2019augmenter drastiquement la lisibilit\xe9 des programmes.",draft:!1},nextItem:{title:"Certificats TLS wildcard avec Letsencrypt, Docker, Traefik via OVH Cloud et Gandi.net",permalink:"/blog/sysadmin-mon-chaton-part2"}},u={authorsImageUrls:[void 0]},s=[{value:"Le principe de base",id:"le-principe-de-base",level:2},{value:"Astuces autour de l\u2019unpacking",id:"astuces-autour-de-lunpacking",level:2},{value:"Allons plus loin.",id:"allons-plus-loin",level:2},{value:"Python 3, c\u2019est du chocolat",id:"python-3-cest-du-chocolat",level:2}],p={toc:s},c="wrapper";function d(e){let{components:n,...l}=e;return(0,r.kt)(c,(0,a.Z)({},p,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Il y a un blog que j'aimais farfouiller de temps en temps lors de mes d\xe9buts en python : Celui de Sam & Max, disparu\naujourd'hui et plus accessible. Je me permets de resortir quelques archives qui m'ont aid\xe9 \xe0 l'\xe9poque, et qui pourront\ntr\xe8s probablement vous aider \xe0 votre tour."),(0,r.kt)("h1",{id:"lunpacking"},"L\u2019unpacking"),(0,r.kt)("p",null,"Dans ce premier d'une, je l'esp\xe8re, longue s\xe9rie d'articles sur python, parlons d'une des 5 choses\nobligatoire \xe0 apprendre en python d'apr\xe8s feu le bog Sam&Max."),(0,r.kt)("p",null,"L\u2019unpacking est une fonctionalit\xe9 typiquement pythonienne qui permet de prendre un it\xe9rable (souvent un tuple), et\nde mettre ses \xe9l\xe9ments dans des variables d\u2019une traite."),(0,r.kt)("p",null,"Cela permet d\u2019augmenter drastiquement la lisibilit\xe9 des programmes. Et chez Code Commun, on aime tout ce qui peut aider\n\xe0 rendre nos logiciels libre plus lisible."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"/img/blog/python-unboxing.jpg",src:t(3857).Z,width:"512",height:"512"})),(0,r.kt)("h2",{id:"le-principe-de-base"},"Le principe de base"),(0,r.kt)("p",null,"Normalement, si vous voulez mettre le contenu d\u2019un tuple dans des variables, vous devez proc\xe9der ainsi :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> ducks = ('riri', 'fifi', 'loulou')\n>>> duck1 = ducks[0]\n>>> duck2 = ducks[1]\n>>> duck3 = ducks[2]\n>>> print(duck1)\n'riri'\n>>> print(duck2)\n'fifi'\n>>> print(duck3)\n'loulou'\n")),(0,r.kt)("p",null,"L\u2019unpacking, qu\u2019on pourrait traduire par le terme fort moche de \u201cd\xe9ballage\u201d, dans le sens \u201couvrir un colis\u201d, permet de\nfaire la m\xeame chose, bien plus facilement :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> duck1, duck2, duck3 = ducks\n>>> print(duck1)\n'riri'\n>>> print(duck2)\n'fifi'\n>>> print(duck3)\n'loulou'\n")),(0,r.kt)("p",null,"Il n\u2019y a rien \xe0 faire, c\u2019est automatique. La seule condition est que le nombre de variables \xe0 gauche du signe \xe9gal soit\nle m\xeame que le nombre d\u2019\xe9l\xe9ments dans la collection de droite."),(0,r.kt)("p",null,"D\u2019ailleurs, \xe7a marche m\xeame avec un seul \xe9l\xe9ment :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> ducks = ('riri',)\n>>> duck1, = ducks # notez la virgule\n>>> duck1\n'riri'\n")),(0,r.kt)("p",null,"Et \xe7a marche avec n\u2019importe quel it\xe9rable, pas uniquement les tuples. Avec une liste, une string, un g\xe9n\xe9rateur\u2026"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> a, b, c, d = [1, 2, 3, 4]\n>>> c\n3\n>>> a, b = \"12\"\n>>> b\n'2'\n>>> def yolo():\n    yield \"leroy\"\n    yield \"jenkins\"\n...\n>>> nom, prenom = yolo()\n>>> nom\n'leroy'\n>>> prenom\n'jenkins'\n")),(0,r.kt)("p",null,"\xc7a marche bien entendu avec un dico ou un set, mais comme ils ne sont pas ordonn\xe9s, c\u2019est pas tr\xe8s utile."),(0,r.kt)("h2",{id:"astuces-autour-de-lunpacking"},"Astuces autour de l\u2019unpacking"),(0,r.kt)("p",null,"On peut utiliser l\u2019unpacking dans des endroits inattendus. Par exemple, pour \xe9changer la valeur de deux variables :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> a = 1\n>>> b = 2\n>>> a, b = (b, a)\n>>> a\n2\n>>> a, b = b, a # les parenth\xe8ses sont facultatives dans les tuples\n>>> b\n2\n")),(0,r.kt)("p",null,"Puisqu\u2019on est dans les tuples sans parenth\xe8ses, on peut retourner un tuple et donner l\u2019illusion de retourner plusieurs variables :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> def duckmebaby():\n...     return \"rifi\", 'filou', 'louri'\n...\n>>> et, hop, la = duckmebaby()\n>>> et\n'rifi'\n>>> hop\n'filou'\n>>> la\n'louri'\n")),(0,r.kt)("h2",{id:"allons-plus-loin"},"Allons plus loin."),(0,r.kt)("p",null,"On peut utiliser l\u2019unpacking \xe0 l\u2019int\xe9rieur d\u2019une boucle for. Souvenez vous que les it\xe9rables peuvent contenir d\u2019autres it\xe9rables. Par exemple, j\u2019ai une liste qui contient 3 tuples, chaque tuple contient deux \xe9l\xe9ments :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> scores = [('Monique', '3'), ('David', 10), ('Dick', 1)]\n>>> for score in scores:\n...     print(score)\n...\n('Monique', '3')\n('David', 10)\n('Dick', 1)\n")),(0,r.kt)("p",null,"Si je veux afficher le nom et le score l\u2019un en dessous de l\u2019autre :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> for nom_et_score in scores:\n...     print(nom_et_score[0])\n...     print(nom_et_score[1])\n...\nMonique\n3\nDavid\n10\nDick\n1\n")),(0,r.kt)("p",null,"Je peux appliquer l\u2019unpacking dans la boucle pour rendre cette op\xe9ration plus \xe9l\xe9gante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> for nom, score in scores:\n...     print(nom)\n...     print(score)\n...\nMonique\n3\nDavid\n10\nDick\n1\n")),(0,r.kt)("p",null,"Cela marche avec des it\xe9rables plus gros, bien entendu. C\u2019est aussi particuli\xe8rement utile avec des dictionnaires car on peut les transformer en it\xe9rable de tuples :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> scores = {'Monique': '3', 'David': 10, 'Dick': 1}\n>>> scores['Monique']\n'3'\n>>> scores.items() # transformation !\ndict_items([('Monique', '3'), ('David', 10), ('Dick', 1)])\n>>> for nom, score in scores.items():\n...     print(nom)\n...     print(score)\n...\nMonique\n3\nDavid\n10\nDick\n1\n")),(0,r.kt)("p",null,"Tout aussi utile, mais plus compliqu\xe9, est l\u2019usage de l\u2019unpacking dans l\u2019appel de fonction. Pour cela, on utilise l\u2019op\xe9rateur splat, l\u2019\xe9toile en Python."),(0,r.kt)("p",null,"Soit une fonction qui additionne des nombres :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">> def add(a, b, c):\n...     return a + b + c\n...\n>>> add(1, 2, 3)\n6\n")),(0,r.kt)("p",null,"Oui, imaginons que je suis compl\xe8tement d\xe9bile, et que j\u2019ai cette fonction p\xe9rave dans mon code. Vous noterez dans les articles que je l\u2019utilise souvent sur le blog. C\u2019est la fonction fourre tout pour expliquer un truc quand j\u2019ai pas d\u2019id\xe9e."),(0,r.kt)("p",null,"Maintenant, imaginez que je veuille additionner des canards. Si, \xe7a marche en Python :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> 'riri' + 'fifi' + 'loulou' # what the duck ?\n'rirififiloulou'\n")),(0,r.kt)("p",null,"Maintenant je me refais mon tuples de canards :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> # nous entrerons dans la bande \xe0 picsou, youhou\n>>> duckyou = ('riri', 'fifi', 'loulou')\n")),(0,r.kt)("p",null,"Si je veux utiliser ma fonction pourrie pour mon use case stupide, je ferai ceci :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> add(duckyou[0], duckyou[1], duckyou[2])\n'rirififiloulou'\n")),(0,r.kt)("p",null,"Voil\xe0 une perte de productivit\xe9 intol\xe9rable, c\u2019est pas comme \xe7a qu\u2019on va faire fructifier son sou f\xe9tiche."),(0,r.kt)("p",null,"On peut forcer l\u2019unpacking avec l\u2019\xe9toile :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> add(*duckyou)\n'rirififiloulou'\n")),(0,r.kt)("p",null,"Si on oublie l\u2019\xe9toile, le premier param\xe8tre re\xe7oit tout le tuple, et les autres param\xe8tres rien :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> add(duckyou)\nTraceback (most recent call last):\n  File \"\", line 1, in \n    add(1)\nTypeError: add() missing 2 required positional arguments: 'b' and 'c'\n")),(0,r.kt)("p",null,"Les fonctions ont m\xeame le droit \xe0 un bonus car on peut unpacker des dictionnaires en utilisant la double \xe9toile. Ca ne marche qu\u2019avec les fonctions, et \xe7a va d\xe9baller le dico pour que chaque paire cl\xe9/valeur soit pass\xe9e comme nom et valeur de l\u2019argument :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> def pas_add(arg1, arg2):\n    print(arg1)\n    print(arg2)\n...\n>>> pas_add(arg1=\"Je suis la valeur 1\", arg2=\"Je m'en branle de qui tu es\")\nJe suis la valeur 1\nJe m'en branle de qui tu es\n>>> dicocorico = {'arg1': 'cotcot', 'arg2': 'ouai je p\xeate un cable, l\\'avion me soule'}\n>>> pas_add(**dicocorico)\ncotcot\nouai je p\xeate un cable, l'avion me soule\n")),(0,r.kt)("p",null,"Quand on unpacke des param\xe8tres, il faut s\u2019assurer que le nombre d\u2019arguments pass\xe9 n\u2019est pas sup\xe9rieur \xe0 ceux existant, sinon \xe7a plante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> dicocorico = {'arg1': 'cocot', 'arg2': 'ouai je p\xeate un cable, l\\'avion me soule', 'dang': 'je suis en trop et \xe7a fait chier tout le monde'}\n>>> pas_add(**dicocorico)\nTraceback (most recent call last):\n  File \"\", line 1, in \n    pas_add(**dicocorico)\nTypeError: pas_add() got an unexpected keyword argument 'dang'\n>>> stuplet = (1, 2, 3)\n>>> pas_add(*stuplet)\nTraceback (most recent call last):\n  File \"\", line 1, in \n    pas_add(*stuplet)\nTypeError: pas_add() takes 2 positional arguments but 3 were given\n")),(0,r.kt)("p",null,"Par contre, rien ne vous emp\xeache de fournir moins d\u2019arguments et de remplir les autres \xe0 la main :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> def encore_add(a, b, c, d):\n    return a + b + 0 + c + d # je feinte\n...\n>>> encore_add(10, *stuplet)\n16\n")),(0,r.kt)("p",null,"Et on peut bien entendu faire le mega mix. Par exemple, prenons la fonction print, dont la signature accepte une infinit\xe9 d\u2019arguments positionnels et quelques arguments nomm\xe9s :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n")),(0,r.kt)("p",null,"Aller, on va lui unpacker sa m\xe8re :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> ducks = ['riri', 'fifi', 'loulou'] # is this duck typing ?\n>>> keywords = {'sep': ' / ', \"end\": \" : vous \xeates du coin ? \\n\"}\n>>> print('picsou', *ducks, **keywords)\npicsou / riri / fifi / loulou : vous \xeates du coin ?\n")),(0,r.kt)("p",null,"\xc7a c\u2019est fait."),(0,r.kt)("h2",{id:"python-3-cest-du-chocolat"},"Python 3, c\u2019est du chocolat"),(0,r.kt)("p",null,"En Python 3, l\u2019unpacking a \xe9t\xe9 am\xe9lior\xe9, et on peut maintenant faire de l\u2019unpacking partiel :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> # exemple 100% repomp\xe9 d'un autre article du blog. Duck it.\n>>> l = list(range(5))\n>>> l\n[0, 1, 2, 3, 4]\n>>> a, *b = l\n>>> a\n0\n>>> b\n[1, 2, 3, 4]\n>>> a, *b, c = l\n>>> a\n0\n>>> b\n[1, 2, 3]\n>>> c\n4\n")),(0,r.kt)("p",null,"Ce qui peut \xeatre tr\xe8s pratique sur les longs it\xe9rables. Comment obtenir la derni\xe8re ligne d\u2019un fichier ?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> *contenu, dernire_ligne = open('/etc/fstab')\n>>> dernire_ligne\n'UUID=0e8c3132-8fa2-46d5-a541-2890db9b371f none            swap    sw              0       0\\n'\n")),(0,r.kt)("p",null,"Ou alors, dans une boucle :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> for initiale, *reste in ducks:\n    print(initiale)\n...\nr\nf\nl\n")))}d.isMDXComponent=!0},3857:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/python-unboxing-2eb35c998387fc40ea74d9b85af3ac54.jpg"}}]);